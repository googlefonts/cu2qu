name: Wheels

on:
  push:
    branches: [main]
    tags: ["v*.*.*"]
  pull_request:
    branches: [main]


jobs:
  build-binaries:
    name: Build wheel ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ "ubuntu-latest", "windows-latest", "macos-latest" ]
    env:
      CIBW_ARCHS: auto64
      # macOS: Explicitly list ARM variants here for cross-compilation.
      CIBW_ARCHS_MACOS: "x86_64 universal2 arm64"
      CIBW_SKIP: pp*
      CIBW_ENVIRONMENT: CU2QU_WITH_CYTHON="true"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      - uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Install cibuildwheel
        run: python -m pip install -U pip cibuildwheel
      - name: Build wheels
        run: python -m cibuildwheel --output-dir dist
      - uses: actions/upload-artifact@v2
        with:
          name: wheels-${{ matrix.os }}
          path: dist/*.whl

  build-pure:
    name: Build sdist and pure wheel
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
          fetch-depth: 0
      # Use PyPy just so we can test the package on it.
      - uses: actions/setup-python@v2
        with:
          python-version: 'pypy-3.9'
      - name: Install packaging tooling
        run: python -m pip install -U pip setuptools wheel
      - name: Build sdist and pure wheel
        run: python setup.py sdist bdist_wheel
      - name: Prepare for testing
        run: python -m pip install pytest -r requirements.txt dist/*.whl
      - name: Test
        run: pytest
      - uses: actions/upload-artifact@v2
        with:
          name: wheels-pure
          path: |
            dist/*.whl
            dist/*.zip

  deploy:
    # only run if the commit is tagged...
    if: startsWith(github.ref, 'refs/tags/v')
    # ... and all build jobs completed successfully
    needs: [build-binaries, build-pure]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: "3.x"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install --upgrade setuptools wheel twine cython
    - name: Download artifacts from build jobs
      uses: actions/download-artifact@v2
      with:
        path: dist
    - name: Extract release notes from annotated tag message
      id: release_notes
      env:
        # e.g. v0.1.0a1, v1.2.0b2 or v2.3.0rc3, but not v1.0.0
        PRERELEASE_TAG_PATTERN: "v[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+([ab]|rc)[[:digit:]]+"
      run: |
        # GH checkout action doesn't preserve tag annotations, we must fetch them
        # https://github.com/actions/checkout/issues/290
        git fetch --tags --force
        # strip leading 'refs/tags/' to get the tag name
        TAG_NAME="${GITHUB_REF##*/}"
        # Dump tag message to temporary .md file (excluding the PGP signature at the bottom)
        TAG_MESSAGE=$(git tag -l --format='%(contents)' $TAG_NAME | sed -n '/-----BEGIN PGP SIGNATURE-----/q;p')
        echo "$TAG_MESSAGE" > "${{ runner.temp }}/release_notes.md"
        # if the tag has a pre-release suffix mark the Github Release accordingly
        if egrep -q "$PRERELEASE_TAG_PATTERN" <<< "$TAG_NAME"; then
          echo "Tag contains a pre-release suffix"
          echo "IS_PRERELEASE=true" >> "$GITHUB_ENV"
        else
          echo "Tag does not contain pre-release suffix"
          echo "IS_PRERELEASE=false" >> "$GITHUB_ENV"
        fi
    - name: Create GitHub release
      id: create_release
      uses: actions/create-release@v1
      env:
        # This token is provided by Actions, you do not need to create your own token
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: ${{ github.ref }}
        body_path: "${{ runner.temp }}/release_notes.md"
        draft: false
        prerelease: ${{ env.IS_PRERELEASE }}
    - name: Build and publish
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        if [ "$IS_PRERELEASE" == true ]; then
          echo "DEBUG: This is a pre-release"
        else
          echo "DEBUG: This is a final release"
        fi
        twine upload dist/wheels-*/*.whl dist/wheels-*/*.zip
